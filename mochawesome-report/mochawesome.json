{
  "stats": {
    "suites": 2,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-30T14:49:23.578Z",
    "end": "2025-06-30T14:49:53.343Z",
    "duration": 29765,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "67d84f13-06d5-4221-a1d0-30dadc2a55f0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "13fff8d0-4b9e-4c3c-85c5-8c817c765e98",
          "title": "Tests on firefox",
          "fullFile": "E:\\bootcamp\\Sesi11_AnandaYudhistira\\test-sauce.js",
          "file": "\\test-sauce.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests on firefox\"",
              "fullTitle": "Tests on firefox \"before all\" hook in \"Tests on firefox\"",
              "timedOut": false,
              "duration": 2423,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (browser === 'firefox') {\n    let options = new firefox.Options();\n    options.addArguments('--incognito');\n    driver = await new Builder().forBrowser('firefox').setFirefoxOptions(options).build();\n    await driver.manage().window().setRect({ width: 1920, height: 1080 });\n} else if (browser === 'chrome') {\n    let options = new chrome.Options();\n    options.addArguments('--incognito');\n    driver = await new Builder().forBrowser('chrome').setChromeOptions(options).build();\n    await driver.manage().window().setRect({ width: 1920, height: 1080 });\n}",
              "err": {},
              "uuid": "f1bf5d83-c2ec-403f-93c3-c50012dea255",
              "parentUUID": "13fff8d0-4b9e-4c3c-85c5-8c817c765e98",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Tests on firefox\"",
              "fullTitle": "Tests on firefox \"after all\" hook in \"Tests on firefox\"",
              "timedOut": false,
              "duration": 606,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) {\n    await driver.quit();\n}",
              "err": {},
              "uuid": "5e0d2d8b-7d0b-47cd-8f5b-53a07b66c904",
              "parentUUID": "13fff8d0-4b9e-4c3c-85c5-8c817c765e98",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Visit SauceDemo dan cek page title",
              "fullTitle": "Tests on firefox Visit SauceDemo dan cek page title",
              "timedOut": false,
              "duration": 13660,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('https://www.saucedemo.com/');\nconst title = await driver.getTitle();\nassert.strictEqual(title, 'Swag Labs');\nlet inputUsernamePOM = await login_page.getUsername(driver);\nawait driver.wait(until.elementIsVisible(inputUsernamePOM), 5000);\nlet inputPasswordPOM = await login_page.getPassword(driver);\nawait driver.wait(until.elementIsVisible(inputPasswordPOM), 5000);\nlet buttonLoginPOM = await login_page.getButtonLogin(driver);\nawait driver.wait(until.elementIsVisible(buttonLoginPOM), 5000);\nawait inputUsernamePOM.sendKeys('standard_user')\nawait inputPasswordPOM.sendKeys('secret_sauce')\nawait buttonLoginPOM.click()\nawait driver.sleep(1000)\nlet buttonOptionPOM = await main_page.getButonOption(driver);\nawait driver.wait(until.elementIsVisible(buttonOptionPOM), 5000);\nawait buttonOptionPOM.click()\nawait driver.sleep(1000)\nlet buttonOptionSelectPOM = await main_page.getButonOptionSelect(driver);\nawait driver.wait(until.elementIsVisible(buttonOptionSelectPOM), 5000);\nawait buttonOptionSelectPOM.click()\nawait driver.sleep(1000)\nlet buttonAddToCartPOM = await main_page.getButtonAddToCart(driver);\nawait driver.wait(until.elementIsVisible(buttonAddToCartPOM), 5000);\nawait buttonAddToCartPOM.click()\nawait driver.sleep(1000)\nlet buttonShoppingCartPOM = await main_page.getButtonShoppingCart(driver);\nawait driver.wait(until.elementIsVisible(buttonShoppingCartPOM), 5000);\nawait buttonShoppingCartPOM.click()\nawait driver.sleep(1000)\nlet buttonRemoveCartPOM = await main_page.getButonRemoveCart(driver);\nawait driver.wait(until.elementIsVisible(buttonRemoveCartPOM), 5000);\nawait buttonRemoveCartPOM.click()\nawait driver.sleep(1000)\nlet buttonContinueShoppingPOM = await main_page.getButonContinueShopping(driver);\nawait driver.wait(until.elementIsVisible(buttonContinueShoppingPOM), 5000);\nawait buttonContinueShoppingPOM.click()\nawait driver.sleep(5000)\nlet ss_full = await driver.takeScreenshot();\nfs.writeFileSync(\"full_ss.png\", Buffer.from(ss_full, \"base64\"))\nif (!fs.existsSync(\"baseline.png\")) {\n    fs.copyFileSync(\"full_ss.png\", \"baseline.png\");\n    console.log(\"Baseline image saved.\");\n    return;\n}\nlet img1 = PNG.sync.read(fs.readFileSync(\"baseline.png\"));\nlet img2 = PNG.sync.read(fs.readFileSync(\"full_ss.png\"));\nif (img1.width !== img2.width || img1.height !== img2.height) {\n    console.error(`Error: Image sizes do not match. Baseline image is ${img1.width}x${img1.height}, but current screenshot is ${img2.width}x${img2.height}.`);\n    // Optionally recreate baseline.png to match current screenshot\n    // fs.copyFileSync(\"full_ss.png\", \"baseline.png\");\n    // console.log(\"Baseline image recreated to match current screenshot.\");\n    return;\n}\nlet { width, height } = img1;\nlet diff = new PNG({ width, height });\nlet numDiffPixels = pixelmatch(img1.data, img2.data, diff.data, width, height, { threshold: 0.1 });\nfs.writeFileSync(\"diff.png\", PNG.sync.write(diff));\nif (numDiffPixels > 0) {\n    console.log(`Visual differences found! Pixels different: ${numDiffPixels}`);\n} else {\n    console.log(\"No visual differences found.\");\n}",
              "err": {},
              "uuid": "aa65148f-f95e-4f94-8021-3362277370d4",
              "parentUUID": "13fff8d0-4b9e-4c3c-85c5-8c817c765e98",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa65148f-f95e-4f94-8021-3362277370d4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13660,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "6ba49315-729a-469c-af80-3c8211a0ab2b",
          "title": "Tests on chrome",
          "fullFile": "E:\\bootcamp\\Sesi11_AnandaYudhistira\\test-sauce.js",
          "file": "\\test-sauce.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests on chrome\"",
              "fullTitle": "Tests on chrome \"before all\" hook in \"Tests on chrome\"",
              "timedOut": false,
              "duration": 720,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (browser === 'firefox') {\n    let options = new firefox.Options();\n    options.addArguments('--incognito');\n    driver = await new Builder().forBrowser('firefox').setFirefoxOptions(options).build();\n    await driver.manage().window().setRect({ width: 1920, height: 1080 });\n} else if (browser === 'chrome') {\n    let options = new chrome.Options();\n    options.addArguments('--incognito');\n    driver = await new Builder().forBrowser('chrome').setChromeOptions(options).build();\n    await driver.manage().window().setRect({ width: 1920, height: 1080 });\n}",
              "err": {},
              "uuid": "a7b415dc-a1bb-4672-b989-4615a0284d34",
              "parentUUID": "6ba49315-729a-469c-af80-3c8211a0ab2b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Tests on chrome\"",
              "fullTitle": "Tests on chrome \"after all\" hook in \"Tests on chrome\"",
              "timedOut": false,
              "duration": 59,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) {\n    await driver.quit();\n}",
              "err": {},
              "uuid": "a7f4a4cf-181f-4728-a0cf-43b54c13bce8",
              "parentUUID": "6ba49315-729a-469c-af80-3c8211a0ab2b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Visit SauceDemo dan cek page title",
              "fullTitle": "Tests on chrome Visit SauceDemo dan cek page title",
              "timedOut": false,
              "duration": 12283,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('https://www.saucedemo.com/');\nconst title = await driver.getTitle();\nassert.strictEqual(title, 'Swag Labs');\nlet inputUsernamePOM = await login_page.getUsername(driver);\nawait driver.wait(until.elementIsVisible(inputUsernamePOM), 5000);\nlet inputPasswordPOM = await login_page.getPassword(driver);\nawait driver.wait(until.elementIsVisible(inputPasswordPOM), 5000);\nlet buttonLoginPOM = await login_page.getButtonLogin(driver);\nawait driver.wait(until.elementIsVisible(buttonLoginPOM), 5000);\nawait inputUsernamePOM.sendKeys('standard_user')\nawait inputPasswordPOM.sendKeys('secret_sauce')\nawait buttonLoginPOM.click()\nawait driver.sleep(1000)\nlet buttonOptionPOM = await main_page.getButonOption(driver);\nawait driver.wait(until.elementIsVisible(buttonOptionPOM), 5000);\nawait buttonOptionPOM.click()\nawait driver.sleep(1000)\nlet buttonOptionSelectPOM = await main_page.getButonOptionSelect(driver);\nawait driver.wait(until.elementIsVisible(buttonOptionSelectPOM), 5000);\nawait buttonOptionSelectPOM.click()\nawait driver.sleep(1000)\nlet buttonAddToCartPOM = await main_page.getButtonAddToCart(driver);\nawait driver.wait(until.elementIsVisible(buttonAddToCartPOM), 5000);\nawait buttonAddToCartPOM.click()\nawait driver.sleep(1000)\nlet buttonShoppingCartPOM = await main_page.getButtonShoppingCart(driver);\nawait driver.wait(until.elementIsVisible(buttonShoppingCartPOM), 5000);\nawait buttonShoppingCartPOM.click()\nawait driver.sleep(1000)\nlet buttonRemoveCartPOM = await main_page.getButonRemoveCart(driver);\nawait driver.wait(until.elementIsVisible(buttonRemoveCartPOM), 5000);\nawait buttonRemoveCartPOM.click()\nawait driver.sleep(1000)\nlet buttonContinueShoppingPOM = await main_page.getButonContinueShopping(driver);\nawait driver.wait(until.elementIsVisible(buttonContinueShoppingPOM), 5000);\nawait buttonContinueShoppingPOM.click()\nawait driver.sleep(5000)\nlet ss_full = await driver.takeScreenshot();\nfs.writeFileSync(\"full_ss.png\", Buffer.from(ss_full, \"base64\"))\nif (!fs.existsSync(\"baseline.png\")) {\n    fs.copyFileSync(\"full_ss.png\", \"baseline.png\");\n    console.log(\"Baseline image saved.\");\n    return;\n}\nlet img1 = PNG.sync.read(fs.readFileSync(\"baseline.png\"));\nlet img2 = PNG.sync.read(fs.readFileSync(\"full_ss.png\"));\nif (img1.width !== img2.width || img1.height !== img2.height) {\n    console.error(`Error: Image sizes do not match. Baseline image is ${img1.width}x${img1.height}, but current screenshot is ${img2.width}x${img2.height}.`);\n    // Optionally recreate baseline.png to match current screenshot\n    // fs.copyFileSync(\"full_ss.png\", \"baseline.png\");\n    // console.log(\"Baseline image recreated to match current screenshot.\");\n    return;\n}\nlet { width, height } = img1;\nlet diff = new PNG({ width, height });\nlet numDiffPixels = pixelmatch(img1.data, img2.data, diff.data, width, height, { threshold: 0.1 });\nfs.writeFileSync(\"diff.png\", PNG.sync.write(diff));\nif (numDiffPixels > 0) {\n    console.log(`Visual differences found! Pixels different: ${numDiffPixels}`);\n} else {\n    console.log(\"No visual differences found.\");\n}",
              "err": {},
              "uuid": "5ee5d56f-670e-48b0-ac6a-1fdfd03177d7",
              "parentUUID": "6ba49315-729a-469c-af80-3c8211a0ab2b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5ee5d56f-670e-48b0-ac6a-1fdfd03177d7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12283,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}